@{
    ViewData["Title"] = "Article Graph";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Orb | Article Graph</title>
    
@*     <script src="@Html.Raw("https://unpkg.com/@memgraph/orb@0.4.3/dist/browser/orb.min.js")"></script>
    <script src="~/js/orb.min.js"></script>
    <script src="~/js/orb.worker.min.js"></script>
 *@
    <script src="~/js/orb.worker.vendor.min.js"></script>
    <script src="~/js/orb.min.js"></script>
    <script>
        if (window.Worker) {
            const worker = new Worker("~/js/orb.worker.min.js");
        } else {
            console.error("Web Workers are not supported in this browser.");
        }
    </script>

    <style>
        #graph {
            border: 1px solid #e0e0e0;
            width: 1300px;
            height: 600px;
        }

        .nodes {
            stroke: #222;
            stroke-width: 1.5px;
            color: #735c99
        }

        #sidePanel {
            display: none;
            position: fixed;
            right: 0;
            top: 0;
            width: 250px;
            height: 100%;
            background-color: #f1f1f1;
            border-left: 1px solid #e0e0e0;
            padding: 20px;
        }

        .navbar {
            margin-bottom: 20px;
        }

    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand">Graph</a>
    </nav>

    <div id="graph"></div>

    <!-- Side Panel for Expand-->
    <div id="sidePanel">
        <h3>Node Info</h3>
        <p id="nodeId">Article ID: </p>
        <button id="expandBtn">Expand</button>
    </div>
    <script>
        const GraphManager = (() => {
            let orbInstance;

            return {
                init(container) {
                    orbInstance = new Orb.Orb(container);
                },
                getOrb() {
                    return orbInstance;
                },
                async expandNode(nodeId) {
                    const orb = this.getOrb();
                    console.log("Expanding node", nodeId);

                    // Fetch new relationships for the clicked node
                    const response = await fetch(`/graph/expand?nodeId=${nodeId}`);
                    const graphData = await response.json();

                    const newNodes = graphData.nodes.map(node => ({
                        id: node.articleID,
                        label: `Article ${node.articleID}`
                    }));

                    const newEdges = graphData.links.map(link => ({
                        id: `${link.source}-${link.target}`,
                        start: link.source,
                        end: link.target,
                        label: `cites`
                    }));


                    // Merge new nodes and edges into the graph
                    orb.data.merge({
                        nodes: newNodes,
                        edges: newEdges,
                    });

                    // Re-render the graph
                    orb.view.render(() => orb.view.recenter());
                }
            };
        })();

        async function fetchGraph() {
            const limit = 50; // limiter
            const response = await fetch(`/graph?limit=${limit}`);
            const graphData = await response.json();

            const nodes = graphData.nodes.map(node => ({
                id: node.articleID,
                label: `Article ${node.articleID}`
            }));

            const edges = graphData.links.map(link => ({
                id: `${link.source}-${link.target}`,
                start: link.source,
                end: link.target,
                label: `cites`
            }));


            const container = document.getElementById("graph");
            GraphManager.init(container);

            const orb = GraphManager.getOrb();

            orb.view.setSettings({
                render: {
                    backgroundColor: '#DDDDDD',
                },
            });

            // Handle node click event to show the side panel with expand button
            orb.events.on(Orb.OrbEventType.NODE_CLICK, (event) => {
                const node = event.node;
                console.log('Node clicked:', node);

                // Show side panel
                const sidePanel = document.getElementById("sidePanel");
                const nodeIdDisplay = document.getElementById("nodeId");
                const expandBtn = document.getElementById("expandBtn");

                sidePanel.style.display = 'block';
                nodeIdDisplay.textContent = `Article ID: ${node.data.id}`;

                expandBtn.onclick = async () => {
                    await GraphManager.expandNode(node.data.id);
                };
            });

            // Style
            orb.data.setDefaultStyle({
                getNodeStyle(node) {
                    return {
                        borderColor: '#1d1d1d',
                        borderWidth: 0.6,
                        color: '#735c99',
                        colorHover: '#735c99',
                        colorSelected: '#e7644e',
                        fontSize: 3,
                        label: node.data.label,
                        size: 6,
                    };
                },
                getEdgeStyle(edge) {
                    return {
                        color: '#999999',
                        colorHover: '#1d1d1d',
                        colorSelected: '#1d1d1d',
                        fontSize: 3,
                        width: 0.3,
                        widthHover: 0.9,
                        widthSelected: 0.9,
                        label: edge.data.label,
                        arrow: {
                            enabled: true,
                            width: 5,
                            color: '#999999',
                        },
                    };
                },
            });

            // Initialize nodes and edges
            orb.data.setup({ nodes, edges });

            // Render and recenter the view
            orb.view.render(() => {
                orb.view.recenter();
            });
        }

        fetchGraph();
    </script>
</body>
</html>
